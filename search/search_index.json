{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"INR USD EURO <pre><code>2022/01/01 Salary\n    Income:Salary:Acme     -100,000 INR\n    Assets:Checking         100,000 INR\n2022/01/03 Rent\n    Assets:Checking         -20,000 INR\n    Expenses:Rent\n2022/01/07 Investment\n    Assets:Checking         -20,000 INR\n    Assets:Equity:NIFTY   168.690 NIFTY @ 118.56 INR\n</code></pre> <pre><code>2022/01/01 Salary\n    Income:Salary:Acme      $-5,000\n    Assets:Checking          $5,000\n2022/01/03 Rent\n    Assets:Checking         $-2,000\n    Expenses:Rent\n2022/01/07 Investment\n    Assets:Checking         $-1,000\n    Assets:Equity:AAPL   6.452 AAPL @ $154.97\n</code></pre> <pre><code>commodity \u20ac\n    format \u20ac1.000,00\ncommodity AAPL\n    format 1.000,00 AAPL\n2022/01/01 Salary\n    Income:Salary:Acme      \u20ac-5.000\n    Assets:Checking          \u20ac5.000\n2022/01/03 Rent\n    Assets:Checking         \u20ac-2.000\n    Expenses:Rent\n2022/01/07 Investment\n    Assets:Checking      \u20ac-1.000,02\n    Assets:Equity:AAPL   6,453 AAPL @ \u20ac154,97\n</code></pre> <p> Install Demo </p> <ul> <li> Builds on top of the ledger double entry accounting tool.</li> <li> Your financial data never leaves your system.</li> <li> The journal and configuration information are stored in plain text files   that can be easily version controlled. You can collaborate with   others by giving access to the files.</li> <li> Can track the latest market price of your Mutual Fund, NPS Fund   and Stock holdings.</li> <li> Can help with expense tracking and budgeting.</li> <li> Can convert CSV or Excel sheets to Ledger journal.</li> <li> Can help with retirement planning.</li> <li> Can show the Mutual Fund and Stock holdings eligible for LTCG and   help you plan Tax Harvesting.</li> <li> And many more visualizations to help you make any financial   decisions.</li> </ul>"},{"location":"faq/","title":"FAQs","text":"<p>I already use ledger/hledger/beancount. How do I get started?</p> <p>Go through the installation docs and get the app working. Go to configuration page and update <code>journal_path</code>, <code>ledger_cli</code>, <code>default_currency</code> and <code>locale</code>. At this point you should be able to view your journal data. Read the accounts docs to understand the account naming conventions followed by paisa.</p> <p>How do I get started?</p> <p>You have installed paisa and gone through the demo and you like it, but you don't know what to do next. There is no way you would sit and type all the transactions you have made in the last decade or so.</p> <p>Paisa is an accounting application and you can focus on things that matters to you the most. For example, if you are not interested in tracking expenses, you can just have a single expense transaction per month. You decide the granularity at which you want to record the transactions. Just recording a few transactions per month like your salary, monthly expense and investments will go a long way and will give you pretty good picture of your finances.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Paisa is available in two formats: a Desktop Application and a CLI (Command Line Interface). Both provide the same list of features, with the primary difference being how the user interface is launched.</p>"},{"location":"getting-started/installation/#desktop-application","title":"Desktop Application","text":"LinuxMacWindows <ul> <li>Download the prebuilt binary named <code>paisa-app-linux-amd64.deb</code></li> <li>You can install it either by double clicking the deb file or run the following commands in a Terminal</li> </ul> <pre><code># cd ~/Downloads\n# sudo dpkg -i paisa-app-linux-amd64.deb\n</code></pre> <ul> <li>Download the prebuilt binary named <code>paisa-app-macos-amd64.dmg</code></li> <li>Open the dmg file and drag the Paisa app into Application folder</li> <li>Since the app is not signed1, Mac will show a warning when you try to open the app. You can check the support page for more details. If you don't get any option to open the app, go to the Application folder, right click on the icon and select open. Usually, this should present you with an option to open.</li> <li>Paisa will store all your journals, configuration files, and other related files in a folder named <code>paisa</code> which will be located in your <code>Documents</code> folder. When you open the app on your Mac for the first time, a permission dialog will appear. Click Allow, then close and reopen the app.</li> </ul> <ul> <li>Download the prebuilt binary named <code>paisa-app-windows-amd64.exe</code></li> <li>Since the app is not signed1, Windows will show multiple warnings, You might have to click <code>Keep anyway</code>, <code>More info</code>, <code>Run anyway</code> etc.</li> <li>Paisa will store all your journals, configuration files, and other related files in a folder named <code>paisa</code> which will be located in your <code>Documents</code> folder.</li> </ul>"},{"location":"getting-started/installation/#cli","title":"CLI","text":"LinuxMacWindows <ul> <li>Download the prebuilt binary named <code>paisa-cli-linux-amd64</code></li> <li>Run the following commands in a Terminal</li> </ul> <pre><code># cd ~/Downloads\n# mv paisa-cli-linux-amd64 paisa\n# chmod u+x paisa\n# mv paisa /usr/local/bin\n</code></pre> <ul> <li>Download the prebuilt binary named <code>paisa-cli-macos-amd64</code></li> <li>Run the following commands in a Terminal</li> </ul> <pre><code># cd ~/Downloads\n# mv paisa-cli-macos-amd64 paisa\n# chmod u+x paisa\n# xattr -dr com.apple.quarantine paisa\n# mv paisa /usr/local/bin\n</code></pre> <ul> <li>Download the prebuilt binary named <code>paisa-cli-windows-amd64.exe</code></li> <li>Since the binary is not signed1 with a certificate, you might get a warning from Windows. You would have to click <code>keep anyway</code>.</li> <li>Run the following command in a Windows PowerShell. Make sure you are in the correct folder. You should see something like <code>PS C:\\Users\\yourname&gt;</code></li> </ul> <pre><code>PS C:\\Users\\john&gt; mv .\\Downloads\\paisa-cli-windows-amd64.exe .\\paisa.exe\n</code></pre> <ul> <li>The <code>paisa.exe</code> binary will be placed in the user's home directory. You can access it via PowerShell. Just open a new PowerShell window, which will start in the home directory. Then, you can run <code>.\\paisa.exe serve</code></li> </ul> <p>Tip</p> <p>Paisa depends on the ledger binary. The prebuilt paisa binaries come with an embedded ledger binary and will use it if it's not already installed on your system. If you prefer to install the ledger yourself, follow the installation instructions on ledger site.</p>"},{"location":"getting-started/installation/#cli-quick-start","title":"CLI Quick Start","text":"<p>Paisa will store all your journals, configuration files, and other related files in a folder named <code>paisa</code> which will be located in your <code>Documents</code> folder.</p> LinuxMacWindows <pre><code># paisa serve\n</code></pre> <pre><code># paisa serve\n</code></pre> <pre><code>PS C:\\Users\\john&gt; .\\paisa.exe serve\n</code></pre> <p>Go to http://localhost:7500. Read the tutorial to learn more.</p>"},{"location":"getting-started/installation/#docker","title":"Docker","text":"<p>Paisa CLI is available on dockerhub.</p> LinuxMac <pre><code># mkdir -p /home/john/Documents/paisa/\n# docker run -p 7500:7500 -v /home/john/Documents/paisa/:/root/Documents/paisa/ ananthakumaran/paisa:latest\n</code></pre> <pre><code># mkdir -p /Users/john/Documents/paisa/\n# docker run -p 7500:7500 -v /Users/john/Documents/paisa/:/root/Documents/paisa/ ananthakumaran/paisa:latest\n</code></pre> <ol> <li> <p>I offer Paisa as a free app, and I don't generate any revenue   from it. Code signing would require me to pay $99 for Mac and   approximately $300 for Windows each and every year to get the   necessary certificates. I can't justify spending that much for   an app that doesn't generate any income. Unfortunately, as a   result, you would have to jump through hoops to get it working.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"getting-started/tutorial/","title":"Tutorial","text":"<p>This tutorial will introduce all the concepts necessary to get started. Paisa builds on top of the ledger1, a command line tool that follows the principles of plain text accounting. ledger primarily focuses on command line users and doesn't provide any graphical user interface. Paisa aims to create a low-friction graphical user interface on top of ledger, thereby making it accessible to a wider range of users.</p> <p>As an end user, you should be familiar with the terms and concepts used by ledger, which we will cover below. Paisa comes with an embedded ledger and you are not required to use ledger via command line unless you want to.</p> <p>Tip</p> <p>Even though the tutorial focuses on Indian users, Paisa is capable of handling any currency. You can change the default currency, locale and financial year starting month etc. Check the configuration reference for more details.</p>"},{"location":"getting-started/tutorial/#journal","title":"Journal","text":"<p>A journal file captures all your financial transactions. A transaction may represent a mutual fund purchase, retirement contribution, grocery purchase and so on. Paisa creates a journal named <code>main.ledger</code>, Let's add our first transaction there. To open the editor, go to <code>Ledger</code> <code>Editor</code></p> <pre><code>2022/01/01/*(1)!*/ Salary/*(2)!*/\n    Income:Salary:Acme/*(3)!*/   -100,000 INR/*(6)!*/\n    Assets:Checking/*(4)!*/    /*(5)!*/100,000 INR\n</code></pre> <ol> <li>Transaction <code>Date</code></li> <li>Transaction description, also called as <code>Payee</code></li> <li>Debit <code>Account</code></li> <li>Credit <code>Account</code></li> <li><code>Amount</code></li> <li><code>Currency</code></li> </ol> <p>ledger follows the double-entry accounting system. In simple terms, it tracks the movement of money from debit account to credit account. Here <code>Income:Salary:Acme</code> is the debit account and <code>Assets:Checking</code> is the credit account. The date at which the transaction took place and a description of the transaction is written in the first line followed by the list of credit or debit entry. Account naming conventions are explained later. The <code>:</code> in the account name represents hierarchy.</p> <pre><code>2022/01/01 Salary\n    Income:Salary:Acme      -100,000 INR\n    Assets:Checking          100,000 INR\n2022/02/01 Salary\n    Income:Salary:Acme      -100,000 INR\n    Assets:Checking          100,000 INR\n2022/03/01 Salary\n    Income:Salary:Acme      -100,000 INR\n    Assets:Checking          100,000 INR\n</code></pre> <p>Let's add few more transactions. As you edit your journal file, the balance of the journal will be shown on the right hand side.</p> <pre><code>         300,000 INR  Assets:Checking\n        -300,000 INR  Income:Salary:Acme\n--------------------\n                   0\n</code></pre> <p>You would notice zero balance and a checking account with 3 lakhs and an income account with -3 lakhs. Double-entry accounting will always results in 0 balance since you have to always enter both the credit and debit side.</p> <p>Let's say your company deducts <code>12,000 INR</code> and contributes it to EPF, we could represent it as follows</p> <pre><code>2022/01/01 Salary\n    Income:Salary:Acme    -100,000 INR\n    Assets:Checking         88,000 INR\n    Assets:Debt:EPF         12,000 INR\n2022/02/01 Salary\n    Income:Salary:Acme    -100,000 INR\n    Assets:Checking         88,000 INR\n    Assets:Debt:EPF         12,000 INR\n2022/03/01 Salary\n    Income:Salary:Acme    -100,000 INR\n    Assets:Checking         88,000 INR\n    Assets:Debt:EPF         12,000 INR\n</code></pre> <p>You can now see the use of <code>:</code> hierarchy in the account name.</p> <pre><code>         300,000 INR  Assets\n         264,000 INR    Checking\n          36,000 INR    Debt:EPF\n        -300,000 INR  Income:Salary:Acme\n--------------------\n                   0\n</code></pre>"},{"location":"getting-started/tutorial/#commodity","title":"Commodity","text":"<p>So far we have only dealt with INR. ledger can handle commodity as well. Let's say you are also investing <code>10,000 INR</code> in UTI Nifty Index Fund and <code>10,000 INR</code> in ICICI Nifty Next 50 Index Fund every month.</p> <pre><code>2018/01/01 Investment\n    Assets:Checking               -20,000 INR\n    Assets:Equity:NIFTY        148.0865 NIFTY @ 67.5281 INR\n    Assets:Equity:NIFTY_JR  358.6659 NIFTY_JR @ 27.8811 INR\n2018/02/01 Investment\n    Assets:Checking               -20,000 INR\n    Assets:Equity:NIFTY        140.2870 NIFTY @ 71.2824 INR\n    Assets:Equity:NIFTY_JR  363.2242 NIFTY_JR @ 27.5312 INR\n2018/03/01 Withdrawal\n    Assets:Checking                          6775.49 INR\n    Income:CapitalGains:Equity:NIFTY          -22.68 INR\n    Assets:Equity:NIFTY          -100 NIFTY {67.5281 INR} [2018/01/01] @ 67.7549 INR\n</code></pre> <p>Let's consider <code>148.0865 NIFTY @ 67.5281 INR</code>. Here <code>NIFTY</code> is the name of the commodity and we have bought <code>148.0865</code> units at <code>67.5281 INR</code> per unit.</p> <p>The withdrawal transaction is bit more involved. When you buy a commodity, you buy them at a specific price on a specific date called lot. When you sell, you usually need to record which lot you are selling for taxation purpose, usually LIFO. <code>-100 NIFTY{67.5281 INR} [2018/01/01] @ 67.7549 INR</code> means you are selling <code>NIFTY</code> at price <code>67.7549 INR</code> that was bought on <code>2018/01/01</code> at <code>67.5281 INR</code>. The gain or loss amount comes from the capital gains account <code>Income:CapitalGains:Equity:NIFTY</code></p> <p>Paisa has support for fetching commodity price history from few providers. Go to <code>Configuration</code> page and expand the <code>Commodities</code> section. You can click the  icon to add a new one. Edit the name to <code>NIFTY</code>. Click the  icon near Price section and select the price provider details. Once done, save the configuration and click the <code>Update Prices</code> from the top right hand side menu. If you had done everything correctly, you would see the latest price of the commodity under <code>Assets</code> <code>Balance</code></p>"},{"location":"getting-started/tutorial/#interest","title":"Interest","text":"<p>There are many instruments like EPF, FD, etc that pay interest at regular intervals. We can treat it as just another transaction. Any income account that has a prefix <code>Income:Interest:</code> can be used as the debit account. It's not mandatory to specify the amount at bot side. If you leave one side, ledger will deduct it.</p> <pre><code>2022/03/31 EPF Interest\n    Income:Interest:EPF     -5,000 INR\n    Assets:Debt:EPF\n</code></pre> <pre><code>           5,000 INR  Assets:Debt:EPF\n          -5,000 INR  Income:Interest:EPF\n--------------------\n                   0\n</code></pre>"},{"location":"getting-started/tutorial/#configuration","title":"Configuration","text":"<p>All the configuration related to paisa is stored in a yaml file named <code>paisa.yaml</code>. The configuration can be edited via the web interface. The sequence in which it looks for the file is described below</p> <ol> <li><code>PAISA_CONFIG</code> environment variable</li> <li>via <code>--config</code> flag</li> <li>Current working directory</li> <li><code>paisa/paisa.yaml</code> file inside User Documents folder.</li> </ol> <p>If it can't find the configuration file, it will create a default configuration file named <code>paisa/paisa.yaml</code> inside User Documents folder. The default configuration is tuned for Indians, users from other countries would have to change the <code>default_currency</code> and <code>locale</code>. Check the configuration reference for details.</p>"},{"location":"getting-started/tutorial/#update","title":"Update","text":"<p>Paisa fetches the latest price of the commodities only when update command is used. Make sure to run <code>paisa update</code> command after you make any changes to your journal file or you want to fetch the latest value of the commodities. The update can be performed from the UI as well via the dropdown in the top right hand side corner.</p> <ol> <li> <p>hledger and beancount are also supported, refer Ledger CLI for more information.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/accounts/","title":"Accounts","text":"<p>If you take a typical transaction, money moves between two parties. In ledger, you call them Account. At least two accounts are involved in any transaction. Accounts are also hierarchical. This helps with the organization. For example you can treat EPF and PPF as two accounts namely <code>Assets:Debt:EPF</code> and <code>Assets:Debt:PPF</code>. The hierarchy helps you ask questions like what is the balance of <code>Assets:Debt</code>, which will include both EPF and PPF.</p> <p>Even though ledger doesn't have any strict Account naming convention, Paisa expects you to follow the standard naming convention.</p> <p>There are four types of account namely</p> <ol> <li> Assets</li> <li> Liabilities</li> <li> Income</li> <li> Expenses</li> </ol> <p>All the accounts you create should be under one of these accounts. This naming convention is a necessity, because without which, it's not possible to tell whether you are spending money or investing money. A transaction from <code>Assets</code> account to <code>Expenses</code> account implies that you are spending money.</p> <p>Money typically flows from <code>Income</code> to <code>Assets</code>, from <code>Assets</code> to either <code>Expenses</code>, <code>Liabilities</code> or other <code>Assets</code>, from <code>Liabilities</code> to <code>Expenses</code>.</p> <pre><code>graph LR\n  I[Income] --&gt; A[Assets];\n  A --&gt; E[Expenses];\n  A --&gt; A;\n  A --&gt; L[Liabilities];\n  L --&gt; E[Expenses];</code></pre> <p>As a general principle, try not to create too many accounts at second level. The UI works best when you create less than or equal to 12 second level accounts under each type. For example, you can have 12 accounts under <code>Expenses</code>. But if you want more, try to add them under 3rd level, example <code>Expenses:Food:Subway</code>.</p>"},{"location":"reference/accounts/#assets","title":"Assets","text":"<p>All your assets should go under <code>Assets:</code>. The level of granularity is up to you. The recommended convention is to use <code>Assets:{instrument_type}:{instrument_name}</code>. The instrument type may be <code>Cash</code>, <code>Equity</code>, <code>Debt</code>, etc. The instrument name may be the name of the fund, stock, etc</p>"},{"location":"reference/accounts/#checking","title":"Checking","text":"<p><code>Assets:Checking</code> is a special account where you keep your money for daily use. This will be included in your net worth, but will not be treated as an investment. So gain page for example, will exclude this account and won't show the returns. If you have multiple checking accounts, you can use sub accounts as well, for example <code>Assets:Checking:HDFC</code> and <code>Assets:Checking:AXIS</code>.</p> <p>The distinction is necessary because Checking account is an asset, but not an investment. So you ideally you want to disregard them when you calculate your absolute returns etc.</p>"},{"location":"reference/accounts/#income","title":"Income","text":"<p>All your income should come from <code>Income:</code>. The typical way is to treat each employer as a separate account like <code>Income:Salary:{company}</code></p>"},{"location":"reference/accounts/#interest","title":"Interest","text":"<p><code>Income:Interest</code> is a special type of account from the perspective of returns calculation. Let's assume you have bought <code>APPLE</code> stock. You might be buying them at regular intervals. To calculate your returns, we can compute the difference between purchase price and current price.</p> <p>Now in case of FD, you will get your interest credited to your account. The returns is the difference between the amount you deposited and the final balance. It's essential we need to know which transactions are deposits and which are interest credits.</p> <p>Any money that comes from the sub account of <code>Income:Interest</code> will be treated as interest. This convention allows paisa to calculate the returns of any debt instrument without explicitly specifying anything else.</p> <ul> <li><code>Income:Interest:{name}</code> - interest debit account</li> </ul>"},{"location":"reference/accounts/#capital-gains","title":"Capital Gains","text":"<pre><code>2018/03/01 Withdrawal\n    Assets:Checking                          6775.49 INR\n    Income:CapitalGains:Equity:NIFTY          -22.68 INR\n    Assets:Equity:NIFTY          -100 NIFTY {67.5281 INR} [2018/01/01] @ 67.7549 INR\n</code></pre> <p>Let's say you have an asset account named <code>Assets:{name}</code> and you make some profit when you sell the asset, this profit should come from capital gains account named <code>Income:CapitalGains:{name}</code>.</p>"},{"location":"reference/accounts/#expenses","title":"Expenses","text":"<p>All your expenses should go to <code>Expenses:{category}</code> accounts. You can also have more than 2 levels as well. The expense page will roll it up to 2 level wherever necessary.</p>"},{"location":"reference/accounts/#tax","title":"Tax","text":"<p>Income tax paid to government should be credited to <code>Expenses:Tax</code> account. This is used to calculate your Net Income and your Savings Rate. If you want to track different types of taxes, you can use sub accounts as well, for example <code>Expenses:Tax:Income</code> and <code>Expenses:Tax:GST</code>.</p>"},{"location":"reference/accounts/#icons","title":"Icons","text":"<p>Each account is associated with an icon and is shown along with the account name in most places. Paisa assigns icon based on few simple rules and it usually falls back to a generic icon. To modify the icon, go to the configuration page, add a new Account and specify the name of your account and then select icon of your choice. Paisa ships with about four icon sets.</p> <ul> <li>Arcticons</li> <li>Font Awesome Regular, Solid and Brands</li> <li>Material Design Icons</li> <li>Fluent Emoji High Contrast</li> </ul> <p>Experimental</p> <p>There is a wide range of free icons available, but adding each icon set to Paisa would increase the app binary size. So a balance has to be struck between the number of icons and the app size. Feel free to start a discussion if you feel strongly any icon set. The current icon sets are not final, they may be replaced if a better alternative is found.</p>"},{"location":"reference/allocation-targets/","title":"Allocation Targets","text":"<p>Paisa allows you to set a allocation target for a group of accounts. The allocation page shows how far your current allocation is from the allocation target. For example, to keep a 40:60 split between debt and equity, use the following configuration. The account name can have <code>*</code> which matches any characters</p> <pre><code>allocation_targets:\n- name: Debt\ntarget: 40\naccounts:\n- Assets:Debt:*\n- name: Equity\ntarget: 60\naccounts:\n- Assets:Equity:*\n</code></pre>"},{"location":"reference/analysis/","title":"Analysis","text":"<p>Ledger represents everything except currency as commodities. A commodity could represent physical object like Gold or certificates like Stock, Bond etc. Some commodities like Mutual Fund is a container for Securities. When you own a mutual fund unit, you indirectly own these securities.</p> <p>The Analysis page unwraps the container and shows you what securities you own along with their amount and percentage. It also categorizes the securities by their industry and rating.</p> <p>Experimental</p> <p>The data that powers this page comes from various sources and might not be 100% accurate. Before you make any decision based on this information, double check via different source.</p>"},{"location":"reference/budget/","title":"Budget","text":"<p>Paisa supports a simple budgeting system. Let's say you get 50000 INR at the beginning of the month. You want to budget this amount and figure out how much you can spend on each category.</p> <p>Let's add a salary transaction to the ledger:</p> <pre><code>2023/08/01 Salary\n    Income:Salary:Acme         -50,000 INR\n    Assets:Checking\n</code></pre> <p>Now you have 50k in your checking account. Let's budget this amount:</p> <pre><code>~ Monthly in 2023/08/01\n    Expenses:Rent               15,000 INR\n    Expenses:Food               10,000 INR\n    Expenses:Clothing            5,000 INR\n    Expenses:Entertainment       5,000 INR\n    Expenses:Transport           5,000 INR\n    Expenses:Personal            5,000 INR\n    Assets:Checking\n</code></pre> <p>The <code>~</code> character indicates that this is a periodic transaction. This is not a real transaction, but used only for forecasting purposes. You can read more about periodic expressions and periodic transactions.</p> <p>Bug</p> <p>Even though the interval part is optional as per the doc, there is a bug in the ledger-cli, so you can't use <code>~ in 2023/08/01</code>, instead you always have to specify some interval like <code>~ Monthly in 2023/08/01</code>.</p> <p></p> <p>Now you can see that you will have 5k left in your checking account at the end of the month, if you spend as per your budget. Before you spend, you can check your budget and verify if you have money available under that category.</p> <p>Let's add some real transactions.</p> <pre><code>2023/08/02 Rent\n    Expenses:Rent               15,000 INR\n    Assets:Checking\n2023/08/03 Transport\n    Expenses:Transport           1,000 INR\n    Assets:Checking\n2023/08/03 Food\n    Expenses:Food                8,500 INR\n    Assets:Checking\n2023/08/05 Transport\n    Expenses:Transport           2,000 INR\n    Assets:Checking\n2023/08/07 Transport\n    Expenses:Transport           3,000 INR\n    Assets:Checking\n2023/08/10 Personal\n    Expenses:Personal            4,000 INR\n    Assets:Checking\n2023/08/15 Insurance\n    Expenses:Insurance           10000 INR\n    Assets:Checking\n</code></pre> <p></p> <p>As the month progresses, you can see how much you have spent and how much you have left. You notice that you have overspent on transport and you have missed the insurance payment. You have a budget deficit now. That means, you can't actually spend as per your budget. You have to first bring the deficit back to 0. Let's cut down the entertainment and clothing budget to 0</p> <pre><code>~ Monthly in 2023/08/01\n    Expenses:Rent              15,000 INR\n    Expenses:Food              10,000 INR\n    Expenses:Clothing               0 INR\n    Expenses:Entertainment          0 INR\n    Expenses:Transport          5,000 INR\n    Expenses:Personal           5,000 INR\n    Assets:Checking\n</code></pre> <p></p> <p>You can go back and adjust your budget anytime. Let's move on to the next month, assuming you haven't made any further transaction.</p> <pre><code>2023/09/01 Salary\n    Income:Salary:Acme        -50,000 INR\n    Assets:Checking\n~ Monthly in 2023/09/01\n    Expenses:Rent              15,000 INR\n    Expenses:Food              10,000 INR\n    Expenses:Clothing           5,000 INR\n    Expenses:Entertainment      5,000 INR\n    Expenses:Transport          5,000 INR\n    Expenses:Personal           5,000 INR\n    Assets:Checking\n</code></pre> <p></p> <p>You can see a new element in the UI called Rollover1. This is basically the amount you have budgeted last month, but haven't spent. This will automatically rollover to the next month. That's pretty much it.</p> <p>To recap, there are just two things you need to do.</p> <p>1) Create a periodic transaction at the beginning of the month when you get your salary.</p> <p>2) Adjust your budget as you spend and make sure there is no deficit.</p> <ol> <li> <p>If you prefer to not have rollover feature, it can be disabled in the configuration page.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/bulk-edit/","title":"Bulk Edit","text":"<p>Paisa provides bulk transaction editor to search and modify multiple transactions at once. The interface is made of two parts:</p> <p>1) Search input box allows you to narrow down the transactions you are interested in making changes</p> <p>2) Bulk Edit form allows you to make changes to the narrowed down set of transactions.</p>"},{"location":"reference/bulk-edit/#search","title":"Search","text":""},{"location":"reference/bulk-edit/#plain","title":"Plain","text":"<p>Paisa provides a powerful search query interface. Let's start with a few example queries.</p> <pre><code>Expenses:Utilities:Electricity\n</code></pre> <p>This will search for all transactions that have a posting with account named Expenses:Utilities:Electricity. By default, the search is case insensitive and will do a substring match. So, <code>Expenses:Utilities</code> will match Expenses:Utilities:Electricity account as well. If you want to search an account name which has special characters like space in it, you can use double quotes to enclose it like <code>\"Expenses:Utilities:Hair Cut\"</code>.</p> <p>You can also search on transaction date. For example, if you want to show all the transactions made on 1st Jan 2023, just type <code>[2023-01-01]</code>. If you want to see all made on that month, just leave out the day part <code>[2023-01]</code>. You can do the same with year, <code>[2023]</code> will show all the transactions made in 2023.</p> <p>There is experimental support for natural language date. You can do queries like <code>[last month]</code>, <code>[last year]</code>, <code>[this month]</code>, <code>[last week]</code>, <code>[jan 2023]</code>, etc.</p> <p>Let's say you want to search by amount. You can do that by typing <code>42</code>, it will show all the transactions that have a posting with that amount.</p> <p>if you want to search a exact Account, you can do that using Regular Expression. Just type <code>/^Assets:Equity:APPLE$/</code>, you can also do case insensitive search by using the modifier <code>i</code> like <code>/^Assets:Equity:APPLE$/i</code>.</p>"},{"location":"reference/bulk-edit/#property","title":"Property","text":"<p>You can also search based on properties like account, commodity, amount, total, filename, payee and date.</p> <pre><code>account = Expenses:Utilities:Electricity\npayee =~ /uber/i\npayee = \"Advance Tax\"\ntotal &gt; 5000\ncommodity = GOLD\ndate &gt;= [2023-01-01]\nfilename = creditcard/2023/jan.ledger\n</code></pre> <p>The general format is <code>property operator value</code>. The property can be any of the following:</p> <ul> <li>account (posting account)</li> <li>commodity (posting commodity)</li> <li>amount (posting amount)</li> <li>total (transaction total)</li> <li>filename (name of the file the transaction is in)</li> <li>payee (transaction payee)</li> <li>date (transaction date)</li> </ul> <p>The operator can be any of the following:</p> <ul> <li>= (equal)</li> <li>=~ (regular expression match)</li> <li>&lt; (less than)</li> <li>&lt;= (less than or equal)</li> <li>&gt; (greater than)</li> <li>&gt;= (greater than or equal)</li> </ul> <p>Not all the combinations of property, operator and value would work, if in doubt, just try it out, the UI will show you an error if the query is not valid.</p> <p>In fact, in the previous format we saw, if the property and operator is not specified and a default set is chosen based on the value type. For example, <code>42</code> will be treated as <code>amount = 42</code>, <code>Expenses:Utilities</code> will be treated as <code>account = Expenses:Utilities</code>, <code>/Expenses:Utilities/i</code> will be treated as <code>account =~ /Expenses:Utilities/i</code>, <code>[2023-01]</code> will be treated as <code>date = [2023-01]</code>.</p>"},{"location":"reference/bulk-edit/#conditional","title":"Conditional","text":"<p>You can combine multiple property based queries using <code>AND</code> and <code>OR</code>, you can negate them using <code>NOT</code></p> <pre><code>account = Expenses:Utilities AND payee =~ /uber/i\ncommodity = GOLD OR total &gt; 5000\ndate &gt;= [2023-01-01] AND date &lt; [2023-04-01]\naccount = Expenses:Utilities AND payee =~ /uber/i AND (total &gt; 5000 OR total &lt; 1000)\ntotal &lt; 5000 AND NOT account = Expenses:Utilities\n[last year] AND (payee =~ /swiggy/i OR payee =~ /phonepe/i)\n</code></pre> <p>If you leave out the conditional operator, it will be treated as <code>AND</code>. Both of the below queries are the same</p> <pre><code>account = Expenses:Utilities AND payee =~ /uber/i\naccount = Expenses:Utilities payee =~ /uber/i\n</code></pre>"},{"location":"reference/bulk-edit/#bulk-edit-form","title":"Bulk Edit Form","text":"<p>Currently bulk edit form supports only account rename feature. More will be added later. The preview button allows you to see the changes before you save them. It will show a side by side diff of the changes.</p>"},{"location":"reference/commodities/","title":"Commodities","text":"<p>There are no restrictions on the type of commodities that can be used in Paisa. Anything like gold, mutual fund, NPS, etc can be tracked as a commodity. Few example transactions can be found below.</p> <pre><code>2019/02/18 NPS\n    Assets:Equity:NPS:SBI:E/*(1)!*/  /*(2)!*/15.9378 NPS_SBI_E/*(3)!*/ @ /*(4)!*/23.5289 INR/*(5)!*/\n    Assets:Checking\n2019/02/21 NPS\n    Assets:Equity:NPS:SBI:E      1557.2175 NPS_SBI_E @ 23.8406 INR\n    Assets:Checking\n2020/06/25 Gold\n    Assets:Gold                         40 GOLD @ 4650 INR\n    Assets:Checking\n</code></pre> <ol> <li>Account name</li> <li>Number of units purchased</li> <li>Commodity Name</li> <li>Purchase Price per Unit</li> <li>Currency</li> </ol> <p>Paisa comes with inbuilt support for fetching the latest price of some commodities like mutual fund, NPS, stocks, etc from few providers. For others, it will try to use the latest purchase price specified in the journal. For example, when you enter the second NPS transaction on <code>2019/02/21</code>, the valuation of your existing holdings will be adjusted based on the new purchase price.</p> <p>To link a commodity with a commodity price provider, Go to <code>Configuration</code> page and expand the <code>Commodities</code> section. You can click the  icon to add a new one. Edit the name to commodity name. Click the  icon near Price section and select the price provider details. Once done, save the configuration and click the <code>Update Prices</code> from the top right hand side menu. If you had done everything correctly, you would see the latest price of the commodity under <code>Assets</code> <code>Balance</code>. You can also view the full price history on <code>Ledger</code> <code>Price</code></p>"},{"location":"reference/commodities/#mf-api-mutual-fund","title":"MF API Mutual Fund","text":"<p>To automatically track the latest value of your mutual funds holdings, you need to link the commodity and the fund scheme code.</p> <pre><code>commodities:\n- name: NIFTY # (1)!\ntype: mutualfund # (2)!\nprice:\nprovider: in-mfapi # (3)!\ncode: 120716 # (4)!\n</code></pre> <ol> <li>commodity name</li> <li>commodity type</li> <li>price provider name</li> <li>mutual fund scheme code</li> </ol> <p>The example configuration above links nifty commodity with the respective mutual fund scheme code.</p>"},{"location":"reference/commodities/#purified-bytes-nps","title":"Purified Bytes NPS","text":"<p>To automatically track the latest value of your nps funds holdings, you need to link the commodity and the fund scheme code.</p> <pre><code>commodities:\n- name: NPS_HDFC_E # (1)!\ntype: nps # (2)!\nprice:\nprovider: com-purifiedbytes-nps # (3)!\ncode: SM008002 # (4)!\n</code></pre> <ol> <li>commodity name</li> <li>type</li> <li>price provider name</li> <li>nps fund scheme code</li> </ol> <p>The example configuration above links NPS fund commodity with their respective NPS fund scheme code.</p>"},{"location":"reference/commodities/#yahoo","title":"Yahoo","text":"<p>To automatically track the latest value of your stock holdings, you need to link the commodity and the stock ticker name.</p> <pre><code>commodities:\n- name: APPLE # (1)!\ntype: stock # (2)!\nprice:\nprovider: com-yahoo # (3)!\ncode: AAPL # (4)!\n</code></pre> <ol> <li>commodity name</li> <li>type</li> <li>price provider name</li> <li>stock ticker code</li> </ol> <p>Stock prices are fetched from yahoo finance website. The ticker code should match the code used in yahoo.</p>"},{"location":"reference/commodities/#realestate","title":"RealEstate","text":"<p>Some commodities like real estate are bought once and the price changes over time. Ledger allows you to set the price as on date.</p> <pre><code>2014/01/01 Home purchase\n    Assets:House                                1 APT @ 4000000 INR\n    Liabilities:Homeloan\nP 2016/01/01 00:00:00 APT 5000000 INR\nP 2018/01/01 00:00:00 APT 6500000 INR\nP 2020/01/01 00:00:00 APT 6700000 INR\nP 2021/01/01 00:00:00 APT 6300000 INR\nP 2022/01/01 00:00:00 APT 8000000 INR\n</code></pre>"},{"location":"reference/commodities/#currencies","title":"Currencies","text":"<p>If you need to deal with multiple currencies, just treat them as you would treat any commodity. Since paisa is a reporting tool, it will always try to convert other currencies to the default_currency. As long as the exchange rate from a currency to default_currency is available, paisa would work without issue</p> <pre><code>P 2023/05/01 00:00:00 USD 81.75 INR\n2023/05/01 Freelance Income\n;; conversion rate will be picked up\n;; from the price directive above\n    Income:Freelance      -100 USD\n    Assets:Checking\n2023/06/01 Freelance Income\n;; conversion rate is specified inline\n    Income:Freelance      -200 USD @ 82.75 INR\n    Assets:Checking\n2023/07/01 Netflix\n;; if not available for a date,\n;; will use previous known conversion rate (82.75)\n    Expenses:Entertainment  10 USD\n    Assets:Checking\n</code></pre>"},{"location":"reference/commodities/#update","title":"Update","text":"<p>Paisa fetches the latest price of the commodities only when you update the prices. This can be done via UI using the dropdown in the top right hand side corner or via <code>paisa update</code> command. Make sure to update the prices after you make any changes to your journal file or you want to fetch the latest value of the commodities.</p>"},{"location":"reference/config/","title":"Configuration","text":"<p>All the configuration related to paisa is stored in a yaml file named <code>paisa.yaml</code>. The configuration can be edited via the web interface. The sequence in which paisa looks for the file is described below</p> <ol> <li><code>PAISA_CONFIG</code> environment variable</li> <li>via <code>--config</code> flag</li> <li>Current working directory</li> <li><code>paisa/paisa.yaml</code> file inside User Documents folder.</li> </ol> <p>If it can't find the configuration file, it will create a default configuration file named <code>paisa/paisa.yaml</code> inside User Documents folder. The default configuration is tuned for Indians, users from other countries would have to change the <code>default_currency</code> and <code>locale</code>.</p> <pre><code># Path to your journal file. It can be absolute or relative to the\n# configuration file. The main journal file can refer other files using\n# `include` as long as all the files are in the same or sub directory\n# REQUIRED\njournal_path: /home/john/Documents/paisa/main.ledger\n# Path to your database file. It can be absolute or relative to the\n# configuration file. The database file will be created if it does not exist.\n# REQUIRED\ndb_path: /home/john/Documents/paisa/paisa.db\n# The ledger client to use\n# OPTIONAL, DEFAULT: ledger, ENUM: ledger, hledger, beancount\nledger_cli: ledger\n# The default currency to use. NOTE: Paisa tries to convert other\n# currencies to default currency, so make sure it's possible to\n# convert to default currency by specifying the exchange rate.\n#\n# OPTIONAL, DEFAULT: INR\ndefault_currency: INR\n# The locale used to format numbers. The list of locales supported\n# depends on your browser. It's known to work well with en-US and en-IN.\n#\n# OPTIONAL, DEFAULT: en-IN\nlocale: en-IN\n# First month of the financial year. This can be set to 1 to follow\n# January to December.\n#\n# OPTIONAL, DEFAULT: 4\nfinancial_year_starting_month: 4\n## Budget\nbudget:\n# Rollover unspent money to next month\n# OPTIONAL, ENUM: yes, no DEFAULT: yes\nrollover: \"yes\"\n## Retirement\nretirement:\n# Safe Withdrawal Rate\n# OPTIONAL, DEFAULT: 4\nswr: 2\n# List of expense accounts\n# OPTIONAL, DEFAULT: Expenses:*\nexpenses:\n- Expenses:Clothing\n- Expenses:Education\n- Expenses:Entertainment\n- Expenses:Food\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Restaurant\n- Expenses:Shopping\n- Expenses:Utilities\n# List of accounts where you keep retirement savings\n# OPTIONAL, DEFAULT: Assets:*\nsavings:\n- Assets:Equity:*\n- Assets:Debt:*\n# By default, average of last 3 year expenses will be used to\n# calculate your yearly expenses. This can be overridden by setting\n# this configuration to positive value\n# OPTIONAL, DEFAULT: 0\nyearly_expenses: 0\n## Schedule AL\n# OPTIONAL, DEFAULT: []\nschedule_al:\n# Code\n# REQUIRED, ENUM: immovable, metal, art, vehicle, bank, share,\n# insurance, loan, cash, liability\n- code: metal\naccounts:\n- Assets:Gold\n- code: bank\naccounts:\n- Assets:Checking\n- Assets:Debt:Cash:FD\n- code: share\naccounts:\n- Assets:Equity:*\n- code: insurance\naccounts:\n- Assets:Debt:Insurance\n## Allocation Target\n# OPTIONAL, DEFAULT: []\nallocation_targets:\n- name: Debt\ntarget: 30\naccounts:\n- Assets:Debt:*\n- Assets:Checking\n- name: Equity\ntarget: 60\naccounts:\n- Assets:Equity:*\n- name: Equity Foreign\ntarget: 20\naccounts:\n- Assets:Equity:NASDAQ\n- name: Equity Index\ntarget: 20\naccounts:\n- Assets:Equity:NIFTY\n- name: Equity Active\ntarget: 20\naccounts:\n- Assets:Equity:PPFAS\n- name: Others\ntarget: 10\naccounts:\n- Assets:Gold\n- Assets:RealEstate\n## Commodities\n# OPTIONAL, DEFAULT: []\ncommodities:\n- name: NASDAQ\n# Required, ENUM: mutualfund, stock, nps, unknown\ntype: mutualfund\nprice:\n# Required, ENUM: in-mfapi, com-yahoo, com-purifiedbytes-nps\nprovider: in-mfapi\n# differs based on provider\ncode: 145552\nharvest: 1095\n# Optional, ENUM: equity65, equity35, debt, unlisted_equity\ntax_category: debt\n- name: NIFTY\ntype: mutualfund\nprice:\nprovider: in-mfapi\ncode: 120716\nharvest: 365\ntax_category: equity65\n- name: APPLE\ntype: stock\nprice:\nprovider: com-yahoo\ncode: AAPL\nharvest: 1095\ntax_category: equity65\n## Import Templates\n# OPTIONAL, DEFAULT: []\nimport_templates:\n- name: SBI Account Statement\n# Required\ncontent: |\n{{#if (isDate ROW.A \"D MMM YYYY\")}}\n{{date ROW.A \"D MMM YYYY\"}} {{ROW.C}}\n{{#if (isBlank ROW.F)}}\n{{predictAccount prefix=\"Expenses\"}}      {{amount ROW.E}} INR\nAssets:Checking:SBI\n{{else}}\nAssets:Checking:SBI                       {{amount ROW.F}} INR\n{{predictAccount prefix=\"Income\"}}\n{{/if}}\n{{/if}}\n# Should be a valid handlebar template\n## Accounts: account customization\n# OPTIONAL, DEFAULT: []\naccounts:\n- name: Liabilities:CreditCard:IDFC\n# Required, name of the account\nicon: arcticons:idfc-first-bank\n# Optional, use the UI to select the icon.\n</code></pre>"},{"location":"reference/import/","title":"Import","text":"<p>Paisa provides ability to convert CSV, TXT, XLS, XLSX or PDF files to Ledger file format. The import page is made of three components.</p> <p>Experimental</p> <p>PDF support is in an experimental stage and may not accurately detect rows.</p> <p>1) File Preview - You can drag and drop files here to preview the contents.</p> <p>2) Ledger Preview - This is where the converted ledger file will be shown.</p> <p>3) Template Editor - This is where you can edit the template.</p> <p>Each row in the CSV file is converted to a transaction in the ledger. This conversion is controlled by the template.</p> <pre><code>{{#if (and (isDate ROW.A \"DD/MM/YYYY\") (isBlank ROW.G))}}\n{{date ROW.A \"DD/MM/YYYY\"}} {{ROW.C}}\n{{predictAccount prefix=\"Expenses\"}}        {{ROW.F}} INR\n    Assets:Checking\n{{/if}}\n</code></pre> <p>Let's break this down. The first line is a conditional statement. It checks if the row has a date in the first column. You can refer any column using their alphabets. The second line constructs the transaction header. The third line constructs the first posting. The fourth line constructs the second posting.</p> <p>Effectively a single row in the CSV file is converted to a single transaction like this.</p> <pre><code>2023/03/28 AMAZON HTTP://WWW.AM IN\n    Expenses:Shopping       249.00 INR\n    Assets:Checking\n</code></pre> <p>The template is written in Handlebars. Paisa provides a few helper functions to make it easier to write the template.</p>"},{"location":"reference/import/#template-management","title":"Template Management","text":"<p>Paisa ships with a few built-in templates. You can also create your own. To create a new template, edit the template and click on the <code>Save As</code> button. User defined custom templates are stored in the configuration file.</p> <p>Tip</p> <p>The import system is designed to be extensible and might not be intuitive if you are not accustomed to coding. If you are unable to create a template suitable for your file, please open an issue with a sample file, and we will provide assistance, possibly adding it to the built-in templates.</p>"},{"location":"reference/import/#template-data","title":"Template Data","text":"<ol> <li>ROW - This is the current row being processed. You can refer to     any column using their alphabets. For example, <code>ROW.A</code> refers to     the first column, <code>ROW.B</code> refers to the second column and so     on. The current row index is available as <code>ROW.index</code>.</li> </ol> Example <pre><code>{\n\"A\": \"28/03/2023\",\n\"B\": \"7357680821\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"12\",\n\"E\": \"0\",\n\"F\": \"249.00\",\n\"G\": \"\",\n\"index\": 6\n}\n</code></pre> <ol> <li>SHEET - This is the entire sheet. It is an array of rows. You    can refer a specific cell using the following syntax <code>SHEET.5.A</code>.</li> </ol> Example <pre><code>[\n{\n\"A\": \"Accountno:\",\n\"B\": \"49493xxx003030\",\n\"index\": 0\n},\n{\n\"A\": \"Customer Name:\",\n\"B\": \"MR John Doe\",\n\"index\": 1\n},\n{\n\"A\": \"Address:\",\n\"B\": \"1234, ABC Street, XYZ City, 123456\",\n\"index\": 2\n},\n{\n\"A\": \"Transaction Details:\",\n\"index\": 3\n},\n{\n\"A\": \"Date\",\n\"B\": \"Sr.No.\",\n\"C\": \"Transaction Details\",\n\"D\": \"Reward Point Header\",\n\"E\": \"Intl.Amount\",\n\"F\": \"Amount(in Rs)\",\n\"G\": \"BillingAmountSign\",\n\"index\": 4\n},\n{\n\"A\": \"49493xxx003030\",\n\"index\": 5\n},\n{\n\"A\": \"28/03/2023\",\n\"B\": \"7357680821\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"12\",\n\"E\": \"0\",\n\"F\": \"249.00\",\n\"G\": \"\",\n\"index\": 6\n},\n{\n\"A\": \"28/03/2023\",\n\"B\": \"7357821997\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"28\",\n\"E\": \"0\",\n\"F\": \"575.00\",\n\"G\": \"\",\n\"index\": 7\n}\n]\n</code></pre>"},{"location":"reference/import/#template-helpers","title":"Template Helpers","text":""},{"location":"reference/import/#eqa-any-b-any-boolean","title":"<code>eq(a: any, b: any): boolean</code>","text":"<p>Checks if the two values are equal.</p>"},{"location":"reference/import/#notvalue-any-boolean","title":"<code>not(value: any): boolean</code>","text":"<p>Negates the given value.</p>"},{"location":"reference/import/#andargs-any-boolean","title":"<code>and(...args: any[]): boolean</code>","text":"<p>Returns true if all the arguments are true.</p>"},{"location":"reference/import/#orargs-any-boolean","title":"<code>or(...args: any[]): boolean</code>","text":"<p>Returns true if any of the arguments are true.</p>"},{"location":"reference/import/#gtea-string-number-b-string-number-boolean","title":"<code>gte(a: string | number, b: string | number): boolean</code>","text":"<p>Checks if a is greater than or equal to b.</p>"},{"location":"reference/import/#gta-string-number-b-string-number-boolean","title":"<code>gt(a: string | number, b: string | number): boolean</code>","text":"<p>Checks if a is greater than b.</p>"},{"location":"reference/import/#ltea-string-number-b-string-number-boolean","title":"<code>lte(a: string | number, b: string | number): boolean</code>","text":"<p>Checks if a is less than or equal to b.</p>"},{"location":"reference/import/#lta-string-number-b-string-number-boolean","title":"<code>lt(a: string | number, b: string | number): boolean</code>","text":"<p>Checks if a is less than b.</p>"},{"location":"reference/import/#negatevalue-string-number-number","title":"<code>negate(value: string | number): number</code>","text":"<p>Negates the given value. For example, <code>negate(\"123.45\")</code> will return <code>-123.45</code></p>"},{"location":"reference/import/#amountstr-string-default-string-string","title":"<code>amount(str: string, {default?: string}): string</code>","text":"<p>Converts the given string to a valid amount. If the string is blank, the default value is used. Examples <code>(0.9534)</code> to <code>-0.9534</code>, <code>\u20b9 1,234.56</code> to <code>1234.56</code></p>"},{"location":"reference/import/#roundstr-string-precision-number-number","title":"<code>round(str: string, {precision?: number}): number</code>","text":"<p>Rounds the given value to the given precision. If precision is not set, defaults to <code>0</code></p>"},{"location":"reference/import/#isdatestr-string-format-string-boolean","title":"<code>isDate(str: string, format: string): boolean</code>","text":"<p>Checks if the given string is a valid date in the given format. Refer Day.js for the full list of supported formats.</p>"},{"location":"reference/import/#predictaccountterms-string-prefix-string-string","title":"<code>predictAccount(...terms: string[], {prefix?: string}): string</code>","text":"<p>Helps with prediction of account name to be used in a transaction. Let's say you import your Credit Card bill, you would prefer the system to automatically assign the account name for you. <code>predictAccount</code> acts like a search engine. It will try to find a transaction that is similar to the current transaction. The search requires input (referred as terms) and it will match transactions with similar description and will pick the accounts from the top match.</p> <p>If <code>terms</code> are not provided, the entire <code>ROW</code> will be used.</p> <p>The <code>prefix</code> is optional and will be used to filter out matching accounts. If no match is found, <code>Unknown</code> will be returned.</p> <pre><code>{{predictAccount prefix=\"Income\"}}\n{{predictAccount ROW.C ROW.F prefix=\"Income\"}}\n</code></pre> <p>Tip</p> <p>Prediction will only work if you have similar transactions in ledger file. It usually means, first time you have to manually fix the Unknown account and then subsequent imports will work</p>"},{"location":"reference/import/#isblankstr-string-boolean","title":"<code>isBlank(str: string): boolean</code>","text":"<p>Checks if the given string is blank.</p>"},{"location":"reference/import/#datestr-string-format-string-string","title":"<code>date(str: string, format: string): string</code>","text":"<p>Parses the given string as a date in the given format and returns the date in the format <code>YYYY/MM/DD</code>. Refer Day.js for the full list of supported formats.</p>"},{"location":"reference/import/#findabovecolumn-string-regexp-string-string","title":"<code>findAbove(column: string, {regexp?: string}): string</code>","text":"<p>Finds the first cell above the current row in the given column. If <code>regexp</code> is provided, the search will continue till a match is found</p> <pre><code>{{findAbove B regexp=\"LIMITED\"}}\n</code></pre>"},{"location":"reference/import/#acronymstr-string-string","title":"<code>acronym(str: string): string</code>","text":"<p>Returns the acronym of the given string that is suitable to be used as a commodity symbol. For example, <code>UTI Nifty Next 50 Index Growth Direct Plan</code> will be converted to <code>UNNI</code></p>"},{"location":"reference/import/#replacestr-string-search-string-replace-string-string","title":"<code>replace(str: string, search: string, replace: string): string</code>","text":"<p>Trims the given string.</p>"},{"location":"reference/import/#regexpteststr-string-regexp-string-boolean","title":"<code>regexpTest(str: string, regexp: string): boolean</code>","text":"<p>Tests the given string against the given regular expression.</p>"},{"location":"reference/import/#regexpmatchstr-string-regexp-string-group-number-string","title":"<code>regexpMatch(str: string, regexp: string, {group?: number}): string</code>","text":"<p>Extract part of a string. Let's say you have <code>Axis Long Term   Equity Growth Direct Plan</code> and you want to extract <code>Axis Long Term   Equity</code>, you can use <code>{{regexpMatch ROW.C \"(.*) Growth Direct Plan\" group=1}}</code> assuming the string is in the column   <code>C</code>. <code>group</code> is optional and defaults to <code>0</code>.</p>"},{"location":"reference/journal/","title":"Journal","text":"<p>All your transactions are stored in plain text files called journal. You can organize your transactions into multiple journal files. The journal_path configuration refers your main journal file. The main journal file can refer other journal files using include directive. The <code>include</code> directive supports wildcards <code>*</code> as well. Transactions are sourced only from the main journal file and other journal files included from the main journal file.</p> <pre><code>include investments.ledger\ninclude expenses/*.ledger\n</code></pre>"},{"location":"reference/journal/#editor","title":"Editor","text":"<p>Paisa comes with a journal editor. It allows you to edit all the files with the same file extension as your main journal and in the same or sub directories as your main journal.</p>"},{"location":"reference/journal/#backup","title":"Backup","text":"<p>Paisa tries its best to keep your journal safe. It creates a backup of your journal file every time you save it. The backup file is created with the same name as your journal file with a <code>.backup.{timestamp}</code> extension. You can revert back to old versions of your journal file via the editor. You can also delete the backup files from the editor.</p> <p>Warning</p> <p>It is recommended to keep your journal files and <code>paisa.yaml</code> under version control or other backup mechanism. Paisa's backup mechanism is not a replacement for a proper backup. You can ignore <code>paisa.db</code> file from your version control system, the data in db file can be recreated from your journal files.</p>"},{"location":"reference/journal/#syntax","title":"Syntax","text":"<p>The journal syntax of the features you use normally along with paisa is documented here. Refer ledger documentation for more details.</p>"},{"location":"reference/journal/#transaction","title":"Transaction","text":"<pre><code>2022/01/01 Salary\n    Income:Salary:Acme      -100,000 INR\n    Assets:Checking          100,000 INR\n</code></pre> <p>A <code>transaction</code> should start with a <code>date</code> followed by <code>description</code>. Following that you can have 2 or more <code>postings</code>. The posting line should have at least 2 leading spaces. The <code>account</code> name and the <code>amount</code> should be separated by at least 2 spaces.</p>"},{"location":"reference/journal/#commodity","title":"Commodity","text":"<pre><code>2022/01/07 Investment\n    Assets:Checking         -20,000 INR\n    Assets:Equity:NIFTY   168.690 NIFTY @ 118.56 INR\n</code></pre> <p><code>commodity</code> cost can be specified using the <code>@</code> syntax. Here <code>118.56</code> is the per unit cost and <code>168.690</code> is the quantity you have bought.</p>"},{"location":"reference/journal/#comment","title":"Comment","text":"<pre><code>; This is a comment\n2023/07/01 Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n</code></pre> <p>Any text after <code>;</code> is treated as a comment</p>"},{"location":"reference/journal/#tags","title":"Tags","text":"<pre><code>2023/07/01 Rent\n; Recurring: Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n</code></pre> <p>Transactions can be tagged with extra metadata called tags. Tag has two parts: tag name and value. In the above example, <code>Recurring</code> is the name and <code>Rent</code> is the value. Tag should be inside comment.</p>"},{"location":"reference/journal/#include","title":"Include","text":"<pre><code>include investments.ledger\ninclude expenses/*.ledger\n</code></pre> <p>Include directive can be used to include other journal files. It supports wildcards <code>*</code>.</p>"},{"location":"reference/ledger-cli/","title":"Ledger CLI","text":"<p>Paisa is compatible with ledger, hledger and beancount. By default paisa will try to use ledger, if you prefer to use hledger or beancount instead, change the <code>ledger_cli</code> value in paisa.yaml</p> <pre><code># OPTIONAL, DEFAULT: ledger, ENUM: ledger, hledger, beancount\nledger_cli: hledger\n</code></pre> <p>Paisa ships with ledger binary. If you use hledger or beancount, make sure that the binaries are installed.</p>"},{"location":"reference/recurring/","title":"Recurring","text":"<p>Some of the transactions recur on a regular interval and it might be useful to know the next due date for such transactions. Recurring page shows the upcoming or recently missed transactions.</p> <p>Paisa depends on the posting metadata to identify which transactions are recurring. This metadata can be added in couple of ways. Let's say you pay rent every month and you want to mark it as recurring, a typical journal would like below</p> <pre><code>2023/07/01 Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n2023/08/01 Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n</code></pre> <p>You can manually tag a posting by adding <code>; Recurring: Rent</code>.</p> <pre><code>2023/07/01 Rent\n; Recurring: Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n2023/08/01 Rent\n; Recurring: Rent\n    Expenses:Rent             15,000 INR\n    Assets:Checking\n</code></pre> <p>The first part of the metadata before the colon is called tag name. It should be <code>Recurring</code>. The second part is the tag value. This value is used to group transactions.</p> <p>Tagging each and every posting can be tiresome. Ledger has a feature called Automated Transaction which can make this process simpler.</p> <pre><code>= Expenses:Rent\n    ; Recurring: Rent\n</code></pre> <p>The first line is the predicate and the line below it will get added to any matching posting. By default, it will match the posting account name. But you can target other attributes like payee, amount etc. You can find more examples below, more info about predicate is available on Ledger docs</p> <pre><code>= expr payee=~/^PPF$/\n    ; Recurring: PPF\n= expr payee=~/Mutual Fund/\n    ; Recurring: Mutual Fund\n= expr 'account=~/Expenses:Insurance/ and (payee=~/HDFC/)'\n    ; Recurring: Life Insurance\n= expr 'account=~/Expenses:Insurance/ and !(payee=~/HDFC/)'\n    ; Recurring: Bike Insurance\n= expr payee=~/Savings Interest/\n    ; Recurring: Savings Interest\n</code></pre>"},{"location":"reference/recurring/#period","title":"Period","text":"<p>Paisa will try to infer the recurring period of the transactions automatically, but this might not be perfect. Recurring period can also be explicitly specified via metadata.</p> <pre><code>= expr payee=~/Savings Interest/\n    ; Recurring: Savings Interest\n; Period: L MAR,JUN,SEP,DEC ?\n</code></pre> <p>Let's say your bank deposits the interest on the last day of the last month of the quarter, we can specify like the example above. Paisa editor recognizes period syntax and shows the upcoming 3 schedules right next to period metadata.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month 1-31\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month 1-12\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week 0-6 (Sunday to Saturday)\n\u2502  \u2502  \u2502\n1  *  ?\n</code></pre> <p>The syntax of the period is similar to cron, with the omission of seconds and hours.</p> Field Allowed values Special characters Day of month <code>1\u201331</code> <code>* , - ? L W</code> Month <code>1-12</code> or <code>JAN-DEC</code> <code>* , -</code> Day of week <code>0-6</code> or <code>SUN-SAT</code> <code>* , - ? L</code> <p><code>*</code> also known as wildcard represents all valid values. <code>?</code> means you want to omit the field, usually you use it on the day of month or day of week. <code>L</code> means last day of the month or week. <code>,</code> can be used to specify multiple entries. <code>-</code> can be used to specify range. <code>W</code> means the closest business day to given day of month</p> <p>Multiple cron expressions can be specified by joining them using <code>|</code>. Refer the wikipedia for more information. If you are not sure, just type it out and the editor will show you whether it is valid and the next 3 schedules if valid.</p>"},{"location":"reference/recurring/#examples","title":"Examples","text":"<ul> <li>Last day of every month <code>; Period: L * ?</code></li> <li>5th every month <code>; Period: 5 * ?</code></li> <li>Every Sunday <code>; Period: ? * 0</code></li> <li>1st of Jan and 7th of Feb <code>; Period 1 JAN ? | 7 FEB ?</code></li> <li>Closest business day to the 15th day of every month. <code>; Period 15W * ?</code></li> </ul>"},{"location":"reference/retirement/","title":"Retirement","text":"<p>Paisa will help you plan your retirement and track your progress. The first part is figuring out what should be your retirement corpus. This will be your target. Instead of specifying the amount explicitly, you can specify your expected yearly expenses and the safe withdrawal rate.</p> <pre><code>retirement:\nswr: 3.3\nyearly_expenses: 1100000\n</code></pre> <p>If you use paisa to track expenses, instead of specifying the <code>yearly_expenses</code>, you can specify the list of accounts. Paisa will take the average of the last 3 year expenses</p> <pre><code>retirement:\nswr: 2\nexpenses:\n- Expenses:Entertainment\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Shopping\n- Expenses:Utilities\n</code></pre> <p>Now that the target is specified, you need to specify the list of accounts where you keep your retirement savings.</p> <pre><code>retirement:\nswr: 2\nexpenses:\n- Expenses:Entertainment\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Shopping\n- Expenses:Utilities\nsavings:\n- Assets:Equity:*\n- Assets:Debt:*\n</code></pre>"},{"location":"reference/tax/","title":"Tax","text":"<p>Paisa provides few features to help with tax filing and tax optimization.</p>"},{"location":"reference/tax/#disclaimer","title":"Disclaimer","text":"<p>The author of this tool is not an accountant, the calculations are made based on their interpretation of rules and regulation. This tool is distributed free hoping it would be useful. The users are advised to consult a tax accountant before making any decision based on the information provided here. Check the LICENSE of paisa for more details.</p>"},{"location":"reference/tax/capital-gains/","title":"Capital Gains","text":"<p>Mutual Funds are considered as capital asset and capital gains tax will be charged on any gains. Capital Gains page shows the financial year wise capital gains tax based on the withdrawal transaction. The sum total, account wise breakdown, and per buy/sell match information are available.</p> <p>Only commodities with <code>tax_category</code> are considered. Please check Tax Harvesting page for configuration details.</p>"},{"location":"reference/tax/capital-gains/#gain","title":"Gain","text":"<p>The difference between the purchase and sell price.</p>"},{"location":"reference/tax/capital-gains/#taxable-gain","title":"Taxable Gain","text":"<p>The gain after applying Indexation or Grandfathering provision.</p> <p>Based on the duration between the purchase and sell date, an asset might be classified as Short Term or Long Term.</p>"},{"location":"reference/tax/capital-gains/#short-term-tax","title":"Short Term Tax","text":"<p>This would be a percentage of the Taxable Gain. The percentage varies based on the asset class.</p>"},{"location":"reference/tax/capital-gains/#long-term-tax","title":"Long Term Tax","text":"<p>This would be a percentage of the Taxable Gain. The percentage varies based on the asset class.</p>"},{"location":"reference/tax/capital-gains/#taxable-at-slab-rate","title":"Taxable at Slab Rate","text":"<p>There are cases where the gain would be added to taxable income and charged Slab rate. Since the tax rate would depend on the person, the whole taxable amount is shown instead of the tax. You can multiply this with your slab rate to get the tax amount.</p>"},{"location":"reference/tax/schedule-al/","title":"Schedule AL","text":"<p>As per the Indian Income tax law, citizens are obligated to report their entire Assets and Liabilities if the total income exceeds \u20b950 lakh. Paisa helps with the computation of the amount.</p> code Section Details immovable A (1) Immovable Assets metal B (1) (i) Jewellery, bullion etc. art B (1) (ii) Archaeological collections, drawings, painting, sculpture or any work of art vehicle B (1) (iii) Vehicles, yachts, boats and aircrafts bank B (1) (iv) (a) Financial assets: Bank (including all deposits) share B (1) (iv) (b) Financial assets: Shares and securities insurance B (1) (iv) (c) Financial assets: Insurance policies loan B (1) (iv) (d) Financial assets: Loans and advances given cash B (1) (iv) (e) Financial assets: Cash in hand liability C (1) Liabilities <p>All you need to do is to specify the accounts that belong to each section. Paisa will compute the total as on the last day of the previous financial year.</p> <pre><code>schedule_al:\n- code: bank\naccounts:\n- Assets:Checking\n- code: share\naccounts:\n- Assets:Equity:*\n- Assets:Debt:*\n</code></pre>"},{"location":"reference/tax/tax-harvesting/","title":"Tax Harvesting","text":"<p>Gains from asset types like Mutual Fund, Stock are subject to capital gains tax. The taxation rate itself differs based on how long you hold your investment, whether it's debt or equity, whether you have more than 1 Lakh gains in a year etc. To further complicate things, there might be exit load applicable.</p> <p>Paisa takes a generic approach and let the user configure when a commodity is safe to harvest. There are two fields related to tax harvesting.</p> <ol> <li> <p>harvest - specifies the number of days after which the commodity is    eligible for tax harvesting. This should be set based on fund exit    load, fund category etc</p> </li> <li> <p>tax_category - This defines how the taxes are calculated as the    government usually tweaks the tax code regularly with various rules    like grandfathering, cost inflation index adjustment, etc.</p> <ol> <li> <p><code>equity65</code> - This is for 65% or more investment in Indian    equity.</p> </li> <li> <p><code>equity35</code> - This if for 35% or more investment in India equity    but less than 65%</p> </li> <li> <p><code>debt</code> - This is for debt funds.</p> </li> <li> <p><code>unlisted_equity</code> - This is for unlisted foreign on Indian equity.</p> </li> </ol> </li> </ol> <pre><code>commodities:\n- name: NIFTY\ntype: mutualfund\ncode: 120716\nharvest: 365\ntax_category: equity65\n- name: ABSTF\ntype: mutualfund\ncode: 119533\nharvest: 1095\ntax_category: debt\n</code></pre> <p>The tax harvest page will show the list of accounts eligible for harvesting.</p>"},{"location":"reference/tax/tax-harvesting/#multiple-folios","title":"Multiple Folios","text":"<p>Paisa uses FIFO method within an Account. If you have multiple folios, this might result in incorrect values. The issue can be solved by using a different Account for each folio.</p>"}]}